'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends3 = require('babel-runtime/helpers/extends');

var _extends4 = _interopRequireDefault(_extends3);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _cheerio = require('cheerio');

var _cheerio2 = _interopRequireDefault(_cheerio);

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

var _socket = require('socket.io-client');

var _socket2 = _interopRequireDefault(_socket);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HLTV_URL = 'http://www.hltv.org';

var toArray = function toArray(elements) {
    return elements.toArray().map(_cheerio2.default);
};
var fetchPage = function () {
    var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(url) {
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        _context.t0 = _cheerio2.default;
                        _context.next = 3;
                        return (0, _isomorphicFetch2.default)(url).then(function (res) {
                            return res.text();
                        });

                    case 3:
                        _context.t1 = _context.sent;
                        return _context.abrupt('return', _context.t0.load.call(_context.t0, _context.t1));

                    case 5:
                    case 'end':
                        return _context.stop();
                }
            }
        }, _callee, undefined);
    }));

    return function fetchPage(_x) {
        return _ref.apply(this, arguments);
    };
}();
var noop = function noop() {};

var HLTV = function () {
    function HLTV() {
        (0, _classCallCheck3.default)(this, HLTV);
        this.MAPS = {
            CACHE: 'de_cache',
            SEASON: 'de_season',
            DUST2: 'de_dust2',
            MIRAGE: 'de_mirage',
            INFERNO: 'de_inferno',
            NUKE: 'de_nuke',
            TRAIN: 'de_train',
            COBBLESTONE: 'de_cobblestone',
            OVERPASS: 'de_overpass',
            TUSCAN: 'de_tuscan'
        };
        this.MATCH_TYPES = {
            LAN: 'Lan',
            ONLINE: 'Online',
            BIG_EVENTS: 'BigEvents',
            MAJORS: 'Majors'
        };
    }

    (0, _createClass3.default)(HLTV, [{
        key: '_getMatchFormatAndMap',
        value: function _getMatchFormatAndMap(mapText) {
            if (mapText && !mapText.includes('bo')) {
                return { maps: [mapText], format: 'bo1' };
            }

            return { format: mapText };
        }
    }, {
        key: 'getMatch',
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(_ref3) {
                var _players;

                var id = _ref3.id;

                var $, teamEls, _teamEls$map, _teamEls$map2, team1, team2, _teamEls$map$map$map, _teamEls$map$map$map2, team1Id, team2Id, title, date, format, additionalInfo, live, event, maps, players, streams;

                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return fetchPage(HLTV_URL + '/matches/' + id + '/-');

                            case 2:
                                $ = _context2.sent;
                                teamEls = toArray($('div.teamName'));
                                _teamEls$map = teamEls.map(function (el) {
                                    return el.text();
                                }), _teamEls$map2 = (0, _slicedToArray3.default)(_teamEls$map, 2), team1 = _teamEls$map2[0], team2 = _teamEls$map2[1];
                                _teamEls$map$map$map = teamEls.map(function (el) {
                                    return el.prev();
                                }).map(function (logo) {
                                    return logo.attr('src').split('/').pop();
                                }).map(Number), _teamEls$map$map$map2 = (0, _slicedToArray3.default)(_teamEls$map$map$map, 2), team1Id = _teamEls$map$map$map2[0], team2Id = _teamEls$map$map$map2[1];
                                title = $('.timeAndEvent .text').text();
                                date = Number($('.timeAndEvent .date').attr('data-unix'));
                                format = $('.preformatted-text').text().split('\n')[0];
                                additionalInfo = $('.preformatted-text').text().split('\n').slice(1).join(' ');
                                live = date < Date.now();
                                event = {
                                    name: $('.timeAndEvent .event').text(),
                                    link: $('.timeAndEvent .event').children().first().attr('href')
                                };
                                maps = toArray($('.mapholder')).map(function (mapEl) {
                                    return {
                                        name: mapEl.find('.mapname').text(),
                                        result: mapEl.find('.results').text()
                                    };
                                });
                                players = (_players = {}, (0, _defineProperty3.default)(_players, team1, toArray($('div.players').first().find('.player > a .flagAlign .text-ellipsis')).map(function (el) {
                                    return el.text();
                                })), (0, _defineProperty3.default)(_players, team2, toArray($('div.players').last().find('.player > a .flagAlign .text-ellipsis')).map(function (el) {
                                    return el.text();
                                })), _players);
                                streams = toArray($('.stream-box')).map(function (streamEl) {
                                    return {
                                        name: streamEl.find('.flagAlign').text(),
                                        link: streamEl.attr('data-stream-embed')
                                    };
                                });
                                return _context2.abrupt('return', {
                                    team1: team1, team2: team2, team1Id: team1Id, team2Id: team2Id, date: date, format: format, additionalInfo: additionalInfo, event: event, maps: maps, players: players, streams: streams, live: live
                                });

                            case 16:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function getMatch(_x2) {
                return _ref2.apply(this, arguments);
            }

            return getMatch;
        }()
    }, {
        key: 'getMatches',
        value: function () {
            var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
                var _this = this;

                var $, liveMatches, upcomingMatches;
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return fetchPage(HLTV_URL + '/matches');

                            case 2:
                                $ = _context3.sent;
                                liveMatches = toArray($('.live-match .a-reset')).map(function (matchEl) {
                                    var id = Number(matchEl.attr('href').split('/')[2]);

                                    var _toArray$map = toArray(matchEl.find('img.logo')).map(function (el) {
                                        return el.attr('title');
                                    }),
                                        _toArray$map2 = (0, _slicedToArray3.default)(_toArray$map, 2),
                                        team1 = _toArray$map2[0],
                                        team2 = _toArray$map2[1];

                                    var _toArray$map$map = toArray(matchEl.find('img.logo')).map(function (el) {
                                        return el.attr('src').split('/').pop();
                                    }).map(Number),
                                        _toArray$map$map2 = (0, _slicedToArray3.default)(_toArray$map$map, 2),
                                        team1Id = _toArray$map$map2[0],
                                        team2Id = _toArray$map$map2[1];

                                    var format = matchEl.find('.bestof').text();
                                    var maps = toArray(matchEl.find('.header .map')).map(function (el) {
                                        return el.text();
                                    });
                                    var event = {
                                        name: matchEl.find('.event-logo').attr('alt'),
                                        id: Number(matchEl.find('.event-logo').attr('src').split('/').pop().split('.')[0])
                                    };

                                    return { id: id, team1: team1, team2: team2, team1Id: team1Id, team2Id: team2Id, event: event, format: format, maps: maps, live: true };
                                });
                                upcomingMatches = toArray($('.upcoming-match')).map(function (matchEl) {
                                    var id = Number(matchEl.attr('href').split('/')[2]);
                                    var date = Number(matchEl.find('div.time').attr('data-unix'));

                                    var _toArray$map3 = toArray(matchEl.find('div.team')).map(function (el) {
                                        return el.text();
                                    }),
                                        _toArray$map4 = (0, _slicedToArray3.default)(_toArray$map3, 2),
                                        team1 = _toArray$map4[0],
                                        team2 = _toArray$map4[1];

                                    var _toArray$map$map3 = toArray(matchEl.find('img.logo')).map(function (el) {
                                        return el.attr('src').split('/').pop();
                                    }).map(Number),
                                        _toArray$map$map4 = (0, _slicedToArray3.default)(_toArray$map$map3, 2),
                                        team1Id = _toArray$map$map4[0],
                                        team2Id = _toArray$map$map4[1];

                                    var _getMatchFormatAndMap2 = _this._getMatchFormatAndMap(matchEl.find('.map-text').text()),
                                        maps = _getMatchFormatAndMap2.maps,
                                        format = _getMatchFormatAndMap2.format;

                                    var label = matchEl.find('.placeholder-text-cell').text();
                                    var event = {
                                        name: matchEl.find('.event-logo').attr('alt'),
                                        id: matchEl.find('.event-logo').attr('src') ? Number(matchEl.find('img.event-logo').attr('src').split('/').pop().split('.')[0]) : void 0
                                    };

                                    return { id: id, date: date, team1: team1, team2: team2, team1Id: team1Id, team2Id: team2Id, format: format, maps: maps, label: label, event: event, live: false };
                                });
                                return _context3.abrupt('return', [].concat((0, _toConsumableArray3.default)(liveMatches), (0, _toConsumableArray3.default)(upcomingMatches)));

                            case 6:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function getMatches() {
                return _ref4.apply(this, arguments);
            }

            return getMatches;
        }()
    }, {
        key: 'getLatestResults',
        value: function () {
            var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
                var _this2 = this;

                var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                    _ref6$pages = _ref6.pages,
                    pages = _ref6$pages === undefined ? 1 : _ref6$pages;

                var matches, i, $;
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                if (!(pages < 1)) {
                                    _context4.next = 2;
                                    break;
                                }

                                throw new Error('HLTV.getLatestResults: pages cannot be less than 1');

                            case 2:
                                matches = [];
                                i = 0;

                            case 4:
                                if (!(i < pages)) {
                                    _context4.next = 12;
                                    break;
                                }

                                _context4.next = 7;
                                return fetchPage(HLTV_URL + '/results?offset=' + i * 100);

                            case 7:
                                $ = _context4.sent;


                                matches = matches.concat(toArray($('.result-con .a-reset')).map(function (matchEl) {
                                    var id = Number(matchEl.attr('href').split('/')[2]);

                                    var _toArray$map5 = toArray(matchEl.find('div.team')).map(function (el) {
                                        return el.text();
                                    }),
                                        _toArray$map6 = (0, _slicedToArray3.default)(_toArray$map5, 2),
                                        team1 = _toArray$map6[0],
                                        team2 = _toArray$map6[1];

                                    var _toArray$map$map5 = toArray(matchEl.find('img.team-logo')).map(function (el) {
                                        return el.attr('src').split('/').pop();
                                    }).map(Number),
                                        _toArray$map$map6 = (0, _slicedToArray3.default)(_toArray$map$map5, 2),
                                        team1Id = _toArray$map$map6[0],
                                        team2Id = _toArray$map$map6[1];

                                    var result = matchEl.find('.result-score').text();

                                    var _getMatchFormatAndMap3 = _this2._getMatchFormatAndMap(matchEl.find('.map-text').text()),
                                        maps = _getMatchFormatAndMap3.maps,
                                        format = _getMatchFormatAndMap3.format;

                                    var event = {
                                        name: matchEl.find('.event-logo').attr('alt'),
                                        id: Number(matchEl.find('.event-logo').attr('src').split('/').pop().split('.')[0])
                                    };

                                    return { id: id, team1: team1, team2: team2, team1Id: team1Id, team2Id: team2Id, result: result, event: event, maps: maps, format: format };
                                }));

                            case 9:
                                i++;
                                _context4.next = 4;
                                break;

                            case 12:
                                return _context4.abrupt('return', matches);

                            case 13:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            function getLatestResults() {
                return _ref5.apply(this, arguments);
            }

            return getLatestResults;
        }()
    }, {
        key: 'getStreams',
        value: function () {
            var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6() {
                var _this3 = this;

                var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                    loadLinks = _ref8.loadLinks;

                var $, streams;
                return _regenerator2.default.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                _context6.next = 2;
                                return fetchPage('' + HLTV_URL);

                            case 2:
                                $ = _context6.sent;
                                streams = _promise2.default.all(toArray($('a.col-box.streamer')).map(function () {
                                    var _ref9 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(streamEl) {
                                        var name, category, country, viewers, hltvLink, $streamPage, realLink;
                                        return _regenerator2.default.wrap(function _callee5$(_context5) {
                                            while (1) {
                                                switch (_context5.prev = _context5.next) {
                                                    case 0:
                                                        name = streamEl.find('.name').text();
                                                        category = streamEl.children().first().attr('title');
                                                        country = {
                                                            name: streamEl.find('.flag').attr('title'),
                                                            code: streamEl.find('.flag').attr('src').split('/').pop().split('.')[0]
                                                        };
                                                        viewers = Number(streamEl.contents().last().text());
                                                        hltvLink = streamEl.attr('href');

                                                        if (!loadLinks) {
                                                            _context5.next = 10;
                                                            break;
                                                        }

                                                        _context5.next = 8;
                                                        return fetchPage('' + HLTV_URL + hltvLink);

                                                    case 8:
                                                        $streamPage = _context5.sent;
                                                        realLink = $streamPage('iframe').attr('src');

                                                    case 10:
                                                        return _context5.abrupt('return', { name: name, category: category, country: country, viewers: viewers, hltvLink: hltvLink, realLink: realLink });

                                                    case 11:
                                                    case 'end':
                                                        return _context5.stop();
                                                }
                                            }
                                        }, _callee5, _this3);
                                    }));

                                    return function (_x5) {
                                        return _ref9.apply(this, arguments);
                                    };
                                }()));
                                _context6.next = 6;
                                return streams;

                            case 6:
                                return _context6.abrupt('return', _context6.sent);

                            case 7:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, this);
            }));

            function getStreams() {
                return _ref7.apply(this, arguments);
            }

            return getStreams;
        }()
    }, {
        key: 'getActiveThreads',
        value: function () {
            var _ref10 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7() {
                var $, threads;
                return _regenerator2.default.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                _context7.next = 2;
                                return fetchPage('' + HLTV_URL);

                            case 2:
                                $ = _context7.sent;
                                threads = toArray($('.activity')).map(function (threadEl) {
                                    var title = threadEl.find('.topic').text();
                                    var link = threadEl.attr('href');
                                    var replies = Number(threadEl.contents().last().text());
                                    var category = threadEl.attr('class').split(' ').find(function (c) {
                                        return c.includes('Cat');
                                    }).replace('Cat', '');

                                    return { title: title, link: link, replies: replies, category: category };
                                });
                                return _context7.abrupt('return', threads);

                            case 5:
                            case 'end':
                                return _context7.stop();
                        }
                    }
                }, _callee7, this);
            }));

            function getActiveThreads() {
                return _ref10.apply(this, arguments);
            }

            return getActiveThreads;
        }()
    }, {
        key: 'getTeamRankingDates',
        value: function () {
            var _ref11 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8() {
                var $, dates;
                return _regenerator2.default.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                _context8.next = 2;
                                return fetchPage(HLTV_URL + '/ranking/teams/');

                            case 2:
                                $ = _context8.sent;
                                dates = toArray($('.filter-column-content')).reduce(function (result, datesEl) {
                                    var textItems = toArray(datesEl.find('.sidebar-single-line-item')).map(function (el) {
                                        return el.text().trim();
                                    });
                                    var textItemsFormatted = textItems.map(function (text) {
                                        return text.toLowerCase().replace(/nd|th|st/, '');
                                    });
                                    var headerText = datesEl.prev().text().toLowerCase();

                                    return (0, _extends4.default)({}, result, (0, _defineProperty3.default)({}, headerText, textItemsFormatted));
                                }, {});
                                return _context8.abrupt('return', dates);

                            case 5:
                            case 'end':
                                return _context8.stop();
                        }
                    }
                }, _callee8, this);
            }));

            function getTeamRankingDates() {
                return _ref11.apply(this, arguments);
            }

            return getTeamRankingDates;
        }()
    }, {
        key: 'getTeamRanking',
        value: function () {
            var _ref12 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9() {
                var _ref13 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                    _ref13$year = _ref13.year,
                    year = _ref13$year === undefined ? '' : _ref13$year,
                    _ref13$month = _ref13.month,
                    month = _ref13$month === undefined ? '' : _ref13$month,
                    _ref13$day = _ref13.day,
                    day = _ref13$day === undefined ? '' : _ref13$day;

                var $, teams;
                return _regenerator2.default.wrap(function _callee9$(_context9) {
                    while (1) {
                        switch (_context9.prev = _context9.next) {
                            case 0:
                                _context9.next = 2;
                                return fetchPage(HLTV_URL + '/ranking/teams/' + year + '/' + month + '/' + day);

                            case 2:
                                $ = _context9.sent;
                                teams = toArray($('.ranked-team')).map(function (teamEl) {
                                    var points = Number(teamEl.find('.points').text().replace(/\(|\)/g, '').split(' ')[0]);
                                    var place = Number(teamEl.find('.position').text().substring(1));
                                    var team = {
                                        name: teamEl.find('.name').text(),
                                        id: Number(teamEl.find('.name').attr('data-url').split('/')[2])
                                    };
                                    var change = teamEl.find('.change').text() === '-' ? 0 : Number(teamEl.find('.change').text());

                                    return { points: points, place: place, team: team, change: change };
                                });
                                return _context9.abrupt('return', teams);

                            case 5:
                            case 'end':
                                return _context9.stop();
                        }
                    }
                }, _callee9, this);
            }));

            function getTeamRanking() {
                return _ref12.apply(this, arguments);
            }

            return getTeamRanking;
        }()
    }, {
        key: 'getMatchesStats',
        value: function () {
            var _ref14 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee10(_ref15) {
                var startDate = _ref15.startDate,
                    endDate = _ref15.endDate,
                    map = _ref15.map,
                    matchType = _ref15.matchType;
                var url, page, matches, hasReachedLastPage, $;
                return _regenerator2.default.wrap(function _callee10$(_context10) {
                    while (1) {
                        switch (_context10.prev = _context10.next) {
                            case 0:
                                url = HLTV_URL + '/stats/matches?startDate=' + startDate + '&endDate=' + endDate + '&matchType=' + matchType + '&maps=' + map;
                                page = 0;
                                matches = [];
                                hasReachedLastPage = false;

                            case 4:
                                _context10.next = 6;
                                return fetchPage(url + '&offset=' + page * 50);

                            case 6:
                                $ = _context10.sent;


                                if ($('.pagination-next').attr('href')) {
                                    page++;
                                } else {
                                    hasReachedLastPage = true;
                                }

                                matches = matches.concat(toArray($('.matches-table tbody tr')).map(function (matchEl) {
                                    var id = Number(matchEl.find('.date-col a').attr('href').split('/')[4]);
                                    var date = Number(matchEl.find('.time').attr('data-unix'));

                                    var _toArray$map7 = toArray(matchEl.find('.team-col a')).map(function (teamEl) {
                                        return teamEl.text();
                                    }),
                                        _toArray$map8 = (0, _slicedToArray3.default)(_toArray$map7, 2),
                                        team1 = _toArray$map8[0],
                                        team2 = _toArray$map8[1];

                                    var _toArray$map$map7 = toArray(matchEl.find('.team-col a')).map(function (teamEl) {
                                        return teamEl.attr('href').split('/')[3];
                                    }).map(Number),
                                        _toArray$map$map8 = (0, _slicedToArray3.default)(_toArray$map$map7, 2),
                                        team1Id = _toArray$map$map8[0],
                                        team2Id = _toArray$map$map8[1];

                                    var score = toArray(matchEl.find('.score')).map(function (scoreEl) {
                                        return scoreEl.text().replace(/( |\(|\))/g, '');
                                    }).map(Number);
                                    var map = matchEl.find('.dynamic-map-name-short').text();
                                    var event = {
                                        name: matchEl.find('.event-col a').text(),
                                        id: Number(matchEl.find('.event-col a').attr('href').split('/')[4])
                                    };

                                    return { id: id, date: date, team1: team1, team2: team2, team1Id: team1Id, team2Id: team2Id, score: score, map: map, event: event };
                                }));

                            case 9:
                                if (!hasReachedLastPage) {
                                    _context10.next = 4;
                                    break;
                                }

                            case 10:
                                return _context10.abrupt('return', matches);

                            case 11:
                            case 'end':
                                return _context10.stop();
                        }
                    }
                }, _callee10, this);
            }));

            function getMatchesStats(_x7) {
                return _ref14.apply(this, arguments);
            }

            return getMatchesStats;
        }()
    }, {
        key: 'connectToScorebot',
        value: function () {
            var _ref16 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee11(_ref17) {
                var id = _ref17.id,
                    _ref17$onScoreboardUp = _ref17.onScoreboardUpdate,
                    onScoreboardUpdate = _ref17$onScoreboardUp === undefined ? noop : _ref17$onScoreboardUp,
                    _ref17$onLogUpdate = _ref17.onLogUpdate,
                    onLogUpdate = _ref17$onLogUpdate === undefined ? noop : _ref17$onLogUpdate,
                    _ref17$onConnect = _ref17.onConnect,
                    onConnect = _ref17$onConnect === undefined ? noop : _ref17$onConnect,
                    _ref17$onDisconnect = _ref17.onDisconnect,
                    onDisconnect = _ref17$onDisconnect === undefined ? noop : _ref17$onDisconnect;
                var $, url, matchId, socket;
                return _regenerator2.default.wrap(function _callee11$(_context11) {
                    while (1) {
                        switch (_context11.prev = _context11.next) {
                            case 0:
                                _context11.next = 2;
                                return fetchPage(HLTV_URL + '/matches/' + id + '/-');

                            case 2:
                                $ = _context11.sent;
                                url = $('#scoreboardElement').attr('data-scorebot-url');
                                matchId = $('#scoreboardElement').attr('data-scorebot-id');
                                socket = _socket2.default.connect(url);


                                socket.on('connect', function () {
                                    onConnect();
                                    socket.emit('readyForMatch', matchId);
                                    socket.on('scoreboard', function (data) {
                                        onScoreboardUpdate(data);
                                    });
                                    socket.on('log', function (data) {
                                        onLogUpdate(data);
                                    });
                                });

                                socket.on('reconnect', function () {
                                    socket.emit('readyForMatch', matchId);
                                });

                                socket.on('disconnect', function () {
                                    onDisconnect();
                                });

                            case 9:
                            case 'end':
                                return _context11.stop();
                        }
                    }
                }, _callee11, this);
            }));

            function connectToScorebot(_x8) {
                return _ref16.apply(this, arguments);
            }

            return connectToScorebot;
        }()
    }]);
    return HLTV;
}();

exports.default = new HLTV();
module.exports = exports['default'];